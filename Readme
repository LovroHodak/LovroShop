LOVROSHOP
-BackEnd
1)
npm init
git init
created index.js, CONFIG, .env, .gitignore
2)
created DATA, MODEL, BIN
seeded products to MongoDB Atlas
3)
npm i cors
created ROUTES
backend ready!!
4)
npm i --save-dev concurrently
npx create-react-app .
created frontend and changed package.json to run back and front with one command

-FrontEnd
5) 
npm i react-router-dom
clean from react-app
App.js -router
NavBar
6)
so far everything is HARD-CODED
HomeScreen
ProductDetail
7)
SideDrawer
BackDrop
functionality of showing and hidding SideDrawer is in
App.js - NavBar.js - SideDrawer.js - BackDrop.js and CSSs
8)
CartScreen
CartItem
9)
(frontend)
npm i react-redux redux redux-devtools-extension redux-thunk
created redux folder
-created store.js (reducer, middleware, store)
-in index.js connected store with Provider
-in google devtools redux I see my store is connected













Here is the explanation that should clear doubts on express.json() and express.urlencoded() and the use of body-parser. It took me some time to figure this out.

What is Middleware? It is those methods/functions/operations that are called BETWEEN processing the Request and sending the Response in your application method.

When talking about express.json() and express.urlencoded() think specifically about POST requests (i.e. the .post request object) and PUT Requests (i.e. the .put request object)

You DO NOT NEED express.json() and express.urlencoded() for GET Requests or DELETE Requests.

You NEED express.json() and express.urlencoded() for POST and PUT requests, because in both these requests you are sending data (in the form of some data object) to the server and you are asking the server to accept or store that data (object), which is enclosed in the body (i.e. req.body) of that (POST or PUT) Request

Express provides you with middleware to deal with the (incoming) data (object) in the body of the request.

a. express.json() is a method inbuilt in express to recognize the incoming Request Object as a JSON Object. This method is called as a middleware in your application using the code: app.use(express.json());

b. express.urlencoded() is a method inbuilt in express to recognize the incoming Request Object as strings or arrays. This method is called as a middleware in your application using the code: app.use(express.urlencoded());

ALTERNATIVELY, I recommend using body-parser (it is an NPM package) to do the same thing. It is developed by the same peeps who built express and is designed to work with express. body-parser used to be part of express. Think of body-parser specifically for POST Requests (i.e. the .post request object) and/or PUT Requests (i.e. the .put request object).